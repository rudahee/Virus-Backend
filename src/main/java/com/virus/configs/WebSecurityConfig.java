package com.virus.configs;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import com.virus.security.OncePerRequestFilterImpl;
import com.virus.security.UsernamePasswordAuthenticationFilterImpl;
import com.virus.services.entity.UserService;

@SuppressWarnings("deprecation")
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private OncePerRequestFilterImpl OPRFilter;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	

	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
	    return super.authenticationManagerBean();
	}
	
	/* 
	 * Spring Security configuration method. we will set various parameters 
	 * such as csrf, CORS, sessions, and filters authentication and authorization among others.
	 */
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
			.cors().and().csrf().disable()  // We disable cors and csrf because it is not necessary. 
			
			.sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS) //we will work without explicit session control

			.and().authorizeRequests() // Access control to endpoints by roles.
				.antMatchers(HttpMethod.POST, "/auth/sign-up").permitAll()
				.antMatchers(HttpMethod.POST, "/auth/sign-in").not().authenticated()
				.antMatchers(HttpMethod.PUT, "/auth/activate").permitAll()
				.antMatchers(HttpMethod.GET, "/user/*").permitAll()
				.antMatchers(HttpMethod.GET, "/user/me").hasRole("MEMBER")
				.anyRequest().authenticated()
			
			.and() // We define the implementation of the authentication and authorization filter.
				.addFilter(new UsernamePasswordAuthenticationFilterImpl(authenticationManagerBean()))
				.addFilterBefore(OPRFilter, BasicAuthenticationFilter.class)
				.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
			
			.and() // We deactivate the login generated by Spring with Thymeleaf by default.
				.formLogin().disable();

	}
	
	/*
	 * In this method we define which service will be managed by the users of the system.
	 */
	@Override
    public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userService).passwordEncoder(passwordEncoder);
    }
}
